// Edge of the Empire RPG Dice Mechanics
//
// !eed log on|off
// !eed #b #g #y #blk #p #r #w
//
// you only need to specify the dice to roll, in any order
// b is blue, g is green, y is yellow, blk is black, p is purple, r is red, w is white
// currently no error checking so you can break it if you type in unsupported arguments

var eedGlobal = {
    diceLogChat : false
};

function rollBoost(diceQty){
	//Blue "Boost" die (d6)
	//1 Blank
	//2 Blank
	//3 Success
	//4 Advantage
	//5 Advantage + Advantage
	//6 Success + Advantage
	var roll = 0;
	var diceLog = "";
	var diceResult = {
		success : 0,
		failure : 0,
		advantage : 0,
		threat : 0,
		triumph : 0,
		despair : 0,
		light : 0,
		dark : 0
	};
	var i = 0;
	
	for (i=1;i<=diceQty;i++) {	
	roll = Math.floor((Math.random()*6)+1);

	switch(roll) {
        case 1:
			diceLog = diceLog + "(Blank)";
			break;
		case 2:
			diceLog = diceLog + "(Blank)";
			break;
		case 3:
			diceLog = diceLog + "(Success)";
			diceResult.success = diceResult.success + 1;
			break;
		case 4:
			diceLog = diceLog + "(Advantage)";
			diceResult.advantage = diceResult.advantage + 1;
			break;
		case 5:
			diceLog = diceLog + "(Advantage x2)";
			diceResult.advantage = diceResult.advantage + 2;
			break;
		case 6:
			diceLog = diceLog + "(Success + Advantage)";
			diceResult.success = diceResult.success + 1;
			diceResult.advantage = diceResult.advantage + 1;
			break;
		default:
			break;
    }
	}
	if (eedGlobal.diceLogChat === true) {
		sendChat("Boost", "/em " + diceLog);
	}
	return diceResult;
}

function rollAbility(diceQty){
	//Green "Ability" die (d8)
	//1 Blank
	//2 Success
	//3 Success
	//4 Advantage
	//5 Advantage
	//6 Success + Advantage
	//7 Advantage + Advantage
	//8 Success + Success
	var roll = 0;
	var diceLog = "";
	var diceResult = {
		success : 0,
		failure : 0,
		advantage : 0,
		threat : 0,
		triumph : 0,
		despair : 0,
		light : 0,
		dark : 0
	};
	var i = 0;
	
	for (i=1;i<=diceQty;i++){		
	roll = Math.floor((Math.random()*8)+1);

	switch(roll) {
        case 1:
			diceLog = diceLog + "(Blank)";
			break;
		case 2:
			diceLog = diceLog + "(Success)";
			diceResult.success = diceResult.success + 1;
			break;
		case 3:
			diceLog = diceLog + "(Success)";
			diceResult.success = diceResult.success + 1;
			break;
		case 4:
			diceLog = diceLog + "(Advantage)";
			diceResult.advantage = diceResult.advantage + 1;
			break;
		case 5:
			diceLog = diceLog + "(Advantage)";
			diceResult.advantage = diceResult.advantage + 1;
			break;
		case 6:
			diceLog = diceLog + "(Success + Advantage)";
			diceResult.success = diceResult.success + 1;
			diceResult.advantage = diceResult.advantage + 1;
			break;
		case 7:
			diceLog = diceLog + "(Advantage x2)";
			diceResult.advantage = diceResult.advantage + 2;
			break;
		case 8:
			diceLog = diceLog + "(Success x2)";
			diceResult.success = diceResult.success + 2;
			break;
		default:
			break;
    }
	}
		if (eedGlobal.diceLogChat === true) {
		sendChat("Ability", "/em " + diceLog);
	}
	return diceResult;
}

function rollProficiency(diceQty){
	//Yellow "Ability" die (d12)
	//1 Blank
	//2 Triumph
	//3 Success
	//4 Success
	//5 Advantage
	//6 Success + Advantage
	//7 Success + Advantage
	//8 Success + Advantage
	//9 Success + Success
	//10 Success + Success
	//11 Advantage + Advantage
	//12 Advantage + Advantage
	var roll = 0;
	var diceLog = "";
	var diceResult = {
		success : 0,
		failure : 0,
		advantage : 0,
		threat : 0,
		triumph : 0,
		despair : 0,
		light : 0,
		dark : 0
	};
	var i = 0;
	
	for (i=1;i<=diceQty;i++){		
	roll = Math.floor((Math.random()*12)+1);

	switch(roll) {
        case 1:
			diceLog = diceLog + "(Blank)";
			break;
		case 2:
			diceLog = diceLog + "(Triumph(+Success))";
			diceResult.triumph = diceResult.triumph + 1;
			diceResult.success = diceResult.success + 1;
			break;
		case 3:
			diceLog = diceLog + "(Success)";
			diceResult.success = diceResult.success + 1;
			break;
		case 4:
			diceLog = diceLog + "(Success)";
			diceResult.success = diceResult.success + 1;
			break;
		case 5:
			diceLog = diceLog + "(Advantage)";
			diceResult.advantage = diceResult.advantage + 1;
			break;
		case 6:
			diceLog = diceLog + "(Success + Advantage)";
			diceResult.success = diceResult.success + 1;
			diceResult.advantage = diceResult.advantage + 1;
			break;
		case 7:
			diceLog = diceLog + "(Success + Advantage)";
			diceResult.success = diceResult.success + 1;
			diceResult.advantage = diceResult.advantage + 1;
			break;
		case 8:
			diceLog = diceLog + "(Success + Advantage)";
			diceResult.success = diceResult.success + 1;
			diceResult.advantage = diceResult.advantage + 1;
			break;
		case 9:
			diceLog = diceLog + "(Success x2)";
			diceResult.success = diceResult.success + 2;
			break;
		case 10:
			diceLog = diceLog + "(Success x2)";
			diceResult.success = diceResult.success + 2;
			break;
		case 11:
			diceLog = diceLog + "(Advantage x2)";
			diceResult.advantage = diceResult.advantage + 2;
			break;
		case 12:
			diceLog = diceLog + "(Advantage x2)";
			diceResult.advantage = diceResult.advantage + 2;
			break;
		default:
			break;
    }
	}
	if (eedGlobal.diceLogChat === true) {
		sendChat("Proficiency", "/em " + diceLog);
	}
	return diceResult;
}

function rollSetBack(diceQty){
	//Black "Setback" die (d6)
	//1 Blank
	//2 Blank
	//3 Failure
	//4 Failure
	//5 Threat
	//6 Threat
	var roll = 0;
	var diceLog = "";
	var diceResult = {
		success : 0,
		failure : 0,
		advantage : 0,
		threat : 0,
		triumph : 0,
		despair : 0,
		light : 0,
		dark : 0
	};
	var i = 0;
	
	for (i=1;i<=diceQty;i++){		
	roll = Math.floor((Math.random()*6)+1);
	
	switch(roll) {
        case 1:
			diceLog = diceLog + "(Blank)";
			break;
		case 2:
			diceLog = diceLog + "(Blank)";
			break;
		case 3:
			diceLog = diceLog + "(Failure)";
			diceResult.failure = diceResult.failure + 1;
			break;
		case 4:
			diceLog = diceLog + "(Failure)";
			diceResult.failure = diceResult.failure + 1;
			break;
		case 5:
			diceLog = diceLog + "(Threat)";
			diceResult.threat = diceResult.threat + 1;
			break;
		case 6:
			diceLog = diceLog + "(Threat)";
			diceResult.threat = diceResult.threat + 1;
			break;
		default:
			break;
    }
	}
	if (eedGlobal.diceLogChat === true) {
		sendChat("SetBack", "/em " + diceLog);
	}
	return diceResult;
}

function rollDifficulty(diceQty){
	//Purple "Ability" die (d8)
	//1 Blank
	//2 Failure
	//3 Threat
	//4 Threat
	//5 Threat
	//6 Failure + Failure
	//7 Failure + Threat
	//8 Threat + Threat
	var roll = 0;
	var diceLog = "";
	var diceResult = {
		success : 0,
		failure : 0,
		advantage : 0,
		threat : 0,
		triumph : 0,
		despair : 0,
		light : 0,
		dark : 0
	};
	var i = 0;
	
	for (i=1;i<=diceQty;i++){		
	roll = Math.floor((Math.random()*8)+1);

	switch(roll) {
        case 1:
			diceLog = diceLog + "(Blank)";
			break;
		case 2:
			diceLog = diceLog + "(Failure)";
			diceResult.failure = diceResult.failure + 1;
			break;
		case 3:
			diceLog = diceLog + "(Threat)";
			diceResult.threat = diceResult.threat + 1;
			break;
		case 4:
			diceLog = diceLog + "(Threat)";
			diceResult.threat = diceResult.threat + 1;
			break;
		case 5:
			diceLog = diceLog + "(Threat)";
			diceResult.threat = diceResult.threat + 1;
			break;
		case 6:
			diceLog = diceLog + "(Failure x2)";
			diceResult.failure = diceResult.failure + 2;
			break;
		case 7:
			diceLog = diceLog + "(Failure + Threat)";
			diceResult.failure = diceResult.failure + 1;
			diceResult.threat = diceResult.threat + 1;
			break;
		case 8:
			diceLog = diceLog + "(Threat x2)";
			diceResult.threat = diceResult.threat + 2;
			break;
		default:
			break;
    }
	}
		if (eedGlobal.diceLogChat === true) {
		sendChat("Difficulty", "/em " + diceLog);
	}
	return diceResult;
}

function rollChallenge(diceQty){
	//Red "Challenge" die (d12)
	//1 Blank
	//2 Despair
	//3 Failure
	//4 Failure
	//5 Threat
	//6 Threat
	//7 Failure + Failure
	//8 Failure + Failure
	//9 Threat + Threat
	//10 Threat + Threat
	//11 Failure + Threat
	//12 Failure + Threat
	var roll = 0;
	var diceLog = "";
	var diceResult = {
		success : 0,
		failure : 0,
		advantage : 0,
		threat : 0,
		triumph : 0,
		despair : 0,
		light : 0,
		dark : 0
	};
	var i = 0;
	
	for (i=1;i<=diceQty;i++){		
	roll = Math.floor((Math.random()*12)+1);

	switch(roll) {
        case 1:
			diceLog = diceLog + "(Blank)";
			break;
		case 2:
			diceLog = diceLog + "(Despair)";
			diceResult.despair = diceResult.despair + 1;
			break;
		case 3:
			diceLog = diceLog + "(Failure)";
			diceResult.failure = diceResult.failure + 1;
			break;
		case 4:
			diceLog = diceLog + "(Failure)";
			diceResult.failure = diceResult.failure + 1;
			break;
		case 5:
			diceLog = diceLog + "(Threat)";
			diceResult.threat = diceResult.threat + 1;
			break;
		case 6:
			diceLog = diceLog + "(Threat)";
			diceResult.threat = diceResult.threat + 1;
			break;
		case 7:
			diceLog = diceLog + "(Failure x2)";
			diceResult.failure = diceResult.failure + 2;
			break;
		case 8:
			diceLog = diceLog + "(Failure x2)";
			diceResult.failure = diceResult.failure + 2;
			break;
		case 9:
			diceLog = diceLog + "(Threat x2)";
			diceResult.threat = diceResult.threat + 2;
			break;
		case 10:
			diceLog = diceLog + "(Threat x2)";
			diceResult.threat = diceResult.threat + 2;
			break;
		case 11:
			diceLog = diceLog + "(Failure + Threat)";
			diceResult.failure = diceResult.failure + 1;
			diceResult.threat = diceResult.threat + 1;
			break;
		case 12:
			diceLog = diceLog + "(Failure + Threat)";
			diceResult.failure = diceResult.failure + 1;
			diceResult.threat = diceResult.threat + 1;
			break;
		default:
			break;
    }
	}
	if (eedGlobal.diceLogChat === true) {
		sendChat("Challenge", "/em " + diceLog);
	}
	return diceResult;
}

function rollForce(diceQty){
	//White "Force" die (d12)
	//1 Light
	//2 Light
	//3 Light + Light
	//4 Light + Light
	//5 Light + Light
	//6 Dark
	//7 Dark
	//8 Dark
	//9 Dark
	//10 Dark
	//11 Dark
	//12 Dark + Dark
	var roll = 0;
	var diceLog = "";
	var diceResult = {
		success : 0,
		failure : 0,
		advantage : 0,
		threat : 0,
		triumph : 0,
		despair : 0,
		light : 0,
		dark : 0
	};
	var i = 0;
	
	for (i=1;i<=diceQty;i++){		
	roll = Math.floor((Math.random()*12)+1);

	switch(roll) {
        case 1:
			diceLog = diceLog + "(Light)";
			diceResult.light = diceResult.light + 1;
			break;
		case 2:
			diceLog = diceLog + "(Light)";
			diceResult.light = diceResult.light + 1;
			break;
		case 3:
			diceLog = diceLog + "(Light x2)";
			diceResult.light = diceResult.light + 2;
			break;
		case 4:
			diceLog = diceLog + "(Light x2)";
			diceResult.light = diceResult.light + 2;
			break;
		case 5:
			diceLog = diceLog + "(Light x2)";
			diceResult.light = diceResult.light + 2;
			break;
		case 6:
			diceLog = diceLog + "(Dark)";
			diceResult.dark = diceResult.dark + 1;
			break;
		case 7:
			diceLog = diceLog + "(Dark)";
			diceResult.dark = diceResult.dark + 1;
			break;
		case 8:
			diceLog = diceLog + "(Dark)";
			diceResult.dark = diceResult.dark + 1;
			break;
		case 9:
			diceLog = diceLog + "(Dark)";
			diceResult.dark = diceResult.dark + 1;
			break;
		case 10:
			diceLog = diceLog + "(Dark)";
			diceResult.dark = diceResult.dark + 1;
			break;
		case 11:
			diceLog = diceLog + "(Dark)";
			diceResult.dark = diceResult.dark + 1;
			break;
		case 12:
			diceLog = diceLog + "(Dark x2)";
			diceResult.dark = diceResult.dark + 2;
			break;
		default:
			break;
    }
	}
	if (eedGlobal.diceLogChat === true) {
		sendChat("Force", "/em " + diceLog);
	}
	return diceResult;
}


function diceAddition(diceTotals, diceResult){
	diceTotals.success = diceTotals.success + diceResult.success;
	diceTotals.failure = diceTotals.failure + diceResult.failure;
	diceTotals.advantage = diceTotals.advantage + diceResult.advantage;
	diceTotals.threat = diceTotals.threat + diceResult.threat;
	diceTotals.triumph = diceTotals.triumph + diceResult.triumph;
	diceTotals.despair = diceTotals.despair + diceResult.despair;
	diceTotals.light = diceTotals.light + diceResult.light;
	diceTotals.dark = diceTotals.dark + diceResult.dark;
	return diceTotals;
}

function diceTotalsSummed(diceTotals) {
	var diceTS = {
		success : 0,
		failure : 0,
		advantage : 0,
		threat : 0,
		triumph : 0,
		despair : 0,
		light : 0,
		dark : 0
	};
	var i = 0;
	
	i = diceTotals.success - diceTotals.failure;
	if (i >= 0) {
		diceTS.success = i;
	}
	else {
		diceTS.failure = Math.abs(i);
	}

	i = diceTotals.advantage - diceTotals.threat;
	if (i >= 0) {
		diceTS.advantage = i;
	}
	else {
		diceTS.threat = Math.abs(i);
	}
	diceTS.triumph = diceTotals.triumph;
	diceTS.despair = diceTotals.despair;
	diceTS.light = diceTotals.light;
	diceTS.dark = diceTotals.dark;
	return diceTS;
}

function processEdgeEmpireDiceScript(diceToRoll, who){
	var diceQty = "";
	var diceColor = "";
	var diceTotals = {
		success : 0,
		failure : 0,
		advantage : 0,
		threat : 0,
		triumph : 0,
		despair : 0,
		light : 0,
		dark : 0
	};
	var i = 0;
	var j = 0;
	var diceResults = "";
	
	for (i=0, j=diceToRoll.length;i<j;i++){
		diceQty = diceToRoll[i].substring(0,1);
		diceColor=diceToRoll[i].substring(1);
	
		switch(diceColor) {
		//Blue "Boost" die (d6)
			case 'b':
				diceTotals = diceAddition(diceTotals, rollBoost(diceQty));
				break;
		//Green "Ability" die (d8)
			case 'g':
				diceTotals = diceAddition(diceTotals, rollAbility(diceQty));
				break;
		//Yellow "Proficiency" die (d12)
			case 'y':
				diceTotals = diceAddition(diceTotals, rollProficiency(diceQty));
				break;
		//Black "Setback" die (d6)
			case 'blk':
				diceTotals = diceAddition(diceTotals, rollSetBack(diceQty));		
				break;
		//Purple "Difficulty" die (d8)
			case 'p':
				diceTotals = diceAddition(diceTotals, rollDifficulty(diceQty));		
				break;
		//Red "Challenge" die (d12)
			case 'r':
				diceTotals = diceAddition(diceTotals, rollChallenge(diceQty));		
				break;
		//White "Force" die (d12)
			case 'w':
				diceTotals = diceAddition(diceTotals, rollForce(diceQty));		
				break;
			default:
				break;
		}
	}
//	if (eedGlobal.diceLogChat === true) {
//		sendChat("", "Success:" + diceTotals.success + " Failure:" + diceTotals.failure + " Advantage:" + diceTotals.advantage + " Threat:" + diceTotals.threat + " Triumph:" + diceTotals.triumph + " Despair:" + diceTotals.despair + " Light:" + diceTotals.light + " Dark:" + diceTotals.dark);
//	}
	diceTotals = diceTotalsSummed(diceTotals);
//	if (eedGlobal.diceLogChat === true) {

    diceResults = diceResults + "[";
    if (diceTotals.success > 0) {
		diceResults = diceResults + " Success:" + diceTotals.success;
	}
	if (diceTotals.failure > 0) {
		diceResults = diceResults + " Fail:" + diceTotals.failure;
	}
	if (diceTotals.advantage > 0) {
		diceResults = diceResults + " Advant:" + diceTotals.advantage;
	}
	if (diceTotals.threat > 0) {
		diceResults = diceResults + " Threat:" + diceTotals.threat;
	}
	if (diceTotals.triumph > 0) {
		diceResults = diceResults + " Triumph:" + diceTotals.triumph;
	}
	if (diceTotals.despair > 0) {
		diceResults = diceResults + " Despair:" + diceTotals.despair;
	}
	if (diceTotals.light > 0) {
		diceResults = diceResults + " Light:" + diceTotals.light;
	}
	if (diceTotals.dark > 0) {
		diceResults = diceResults + " Dark:" + diceTotals.dark;
	}
    diceResults = diceResults + "]";
    
    sendChat("", "/desc " + who + " EotE Dice:" + diceToRoll + "\n" + diceResults);
//		sendChat(who, "\nSuccess:" + diceTotals.success + " Failure:" + diceTotals.failure + "\nAdvantage:" + diceTotals.advantage + " Threat:" + diceTotals.threat + "\nTriumph:" + diceTotals.triumph + " Despair:" + diceTotals.despair + "\nLight:" + diceTotals.light + " Dark:" + diceTotals.dark);
//	}
}

var processScriptTabs = function(argv, who) {
    // this will run the various other scripts depending upon the chat
    // window command.  Just add another Case statement to add a new command.

    var script = argv.shift();
    switch(script) {
    	case "!eed":
			if (argv[0] === "log"){
				if (argv[1] === "on"){
					eedGlobal.diceLogChat = true;
				}
				else {
					if (argv[1] === "off") {
						eedGlobal.diceLogChat = false;
					}
				}
			}
			else {
				processEdgeEmpireDiceScript(argv, who);
			}
		break;
        default:
    }
};

on("chat:message", function(msg) {
    // returns the chat window command entered, all in lowercase.
    
    var chatCommand = msg.content;
    chatCommand = chatCommand.toLowerCase(); //make all characters lowercase
//    log(chatCommand);
    var argv = chatCommand.split(' ');
    if (msg.type != 'api') {
        return;
    }
    return processScriptTabs(argv, msg.who);
});